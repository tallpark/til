https://tall-doodlespace.tistory.com/43

Git
버전 관리를 위한 도구

1. 버전 관리 할 수 있다.

  - 무슨 작업을 했는지도 히스토리로 한 눈에 볼 수 있다.

2. 작업 단위를 나눌 수 있다.

  - 에러 발생 부분을 쉽게 파악 가능

3. 협업해서 하나의 프로젝트를 만드는데 유용해요.

  - 누가, 언제, 어떤 부분을 수정 했는지를 한 눈에 파악 가능 프로젝트를 나누어서 작업하고 합치는 것이 편하다.

 

Github
Git 원격 저장소 + Git의 커뮤니티 기능

 

Sourcetree
1. Git을 쉽게 사용할 수 있는 도구

2. 초심자부터 중급자까지 여러가지 기능 제공

 

Commit
누가, 언제, 현재 파일 내용들 을 포함 현재 프로젝트 상태를 저장한 것을 commit이라고 한다.

Git은 commit을 통해 '현재 프로젝트의 상태'를 저장하고 조회

- commit id : commit 을 구분하기 위한 유일한 값.

- 작업 일자 (날짜와 시간)

- 작업한 사람(작성자 author)

- 작업 내역 (commit 메시지)

- 작업 내역의 순서 : 해당 commit 의 직전 commit 이 무엇인지 정보

 

정리

1. 버전관리를 한다는 건 어떤 의미일까 ?

바뀐 정보를 계속해서 쌓아가면서 변화하는 부분을 기록해 나아가는 것

 

- 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. Git 은 누가, 언제, 해당 시점의 프로젝트 상태를 기록해두기 때문에 버전 관리가 가능합니다.

 

2. 작업내역 단위인 commit에는 어떤 정보가 포함되어 있어야 잘 버전관리를 할 수 있을까 ?

누가, 언제, 현재 파일 내용, commit 메시지, commit id

 

- 누가, 언제, 무엇을 했는지가 필요하겠죠? 어떤 작업을 했는지 알려주는 작업 내역인 commit 메시지, 누가(author), commit 한 시간이 필요해요.

- 그리고 commit 을 편하게 관리하기 위한 commit 아이디! commit 아이디는 사용자 아이디처럼 commit 에 부여된 유일한 값!

 

3. 지금까지 우리가 실습은 어떤 순서로 했었지 ?

  1. 폴더 만들고 git이랑 연결하기

  2. txt파일 만들어서 내용 올리기

  3. 소스코드를 이용해 파일 commit하기

  4. 파일 내용 수정해서 다시 commit하기

 

- 기존의 프로젝트를 git 프로젝트로 만든다. - git 초기화(git initialize)

- commit 할 파일들을 add(staging) 하고 commit 메시지 작성해서 commit!

 

 

repo(리포, repository)
git으로 관리되는 프로젝트를 git에서 부르는 명칭

로컬 repo : 내 컴퓨터에 저장되어있는 리포

원격 reop : Github처럼 다른 곳에서 접속할 수 있는 공간에 저장되어있는 리포

 

로컬 repo의 commit들을 원격 repo에 반영하는 것을 push(푸쉬)라고 한다.

원격 repo의 commit들을 로컬 repo에 반영하는 것을 pull(풀)이라고 한다.

원격 repo를 내 컴퓨터에서도 사용할 수 있도록 가져올 수 있는데, 일종의 초기 다운로드로 clone(클론, 복제)이라고 한다.

 

정리

1. 원격 repo와 로컬 repo를 연결해서 내용을 반영하고 싶을 땐 어떤 방법을 써야할까 ?

push와 pull 그리고 clone을 이용해서 반영할 수 있다.

 

- 로컬 repo 가 없고 원격 repo 에 있는 내용을 가져오고 싶을 때는 clone 한다.

- 원격 repo 와 로컬 repo 둘 다 있고 두 개를 연결하고 싶을 때는 로컬 repo 가 원격 repo를 tracking 하도록 설정한다.

 

 

2. 원격 repo와 로컬 repo는 왜 따로 있을까 ?

하나의 원격 repo에서 모두가 같이 변경사항을 입력하고 저장하면 충돌이 날 수 있기 때문에

각자의 로컬 repo로 pull해서 정보를 변경하고 원격 repo에 push해서 반영한다.

 

협업할 때, 혹은 여러 컴퓨터를 사용한다면 하나의 원격 repo 에 여러 로컬 repo 를 연결시킬 수 있다.

하나의 프로젝트를 동시에 작업하는게 가능해진다.

 

3. push와 pull의 개념을 원격 repo와 로컬 repo를 포함해 그림으로 그려보세요

                      pull >>

원격 repo                        로컬 repo

                      << push